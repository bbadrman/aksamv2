security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            user_checker: App\Security\UserChecker
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
     - { path: ^/api, roles: ROLE_ADMIN, methods: [GET, PUT, DELETE], }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    role_hierarchy:
        ROLE_SUPER_ADMIN: ROLE_ADMIN 

        ROLE_ADMIN: ROLE_AFFECT, ROLE_TRAITEMENT, ROLE_STATIQUE,  ROLE_RH, ROLE_PARAMETTRE, ROLE_AJOUT_USER, ROLE_AJOUT_PRODUIT, ROLE_PRODUIT, ROLE_EQUIPE, ROLE_AJOUT_EQUIPE, ROLE_GESTION_USER, ROLE_UNITE, ROLE_AJOUT_UNITE, ROLE_CLIENT, ROLE_STAND, ROLE_ADD_PROS, ROLE_AJOUTER_PROSPECT, ROLE_PRECLIENT, ROLE_CLIENT, ROLE_PROSPECTS_NON_TRAITES, ROLE_CHERCHER_PROSPECT, ROLE_RELANCES_DU_JOUR, ROLE_RELANCES_AVENIR, ROLE_RELANCES_NON_TRAITEES, ROLE_INJOIGNABLES, ROLE_PAYMENTS, ROLE_PRECONTRAT, ROLE_CONTRAT, ROLE_SAV, ROLE_APPEL, ROLE_RELANCER 

        ROLE_CHEF:  ROLE_COMRC, ROLE_AJOUTER_PROSPECT, ROLE_AFFECT

        ROLE_COMRC: ROLE_PRECLIENT, ROLE_CLIENT, ROLE_PROSPECTS_NON_TRAITES, ROLE_CHERCHER_PROSPECT, ROLE_RELANCES_DU_JOUR, ROLE_RELANCES_AVENIR, ROLE_RELANCES_NON_TRAITEES, ROLE_INJOIGNABLES, ROLE_PAYMENTS, ROLE_PRECONTRAT, ROLE_CONTRAT, ROLE_SAV, ROLE_APPEL, ROLE_RELANCER, ROLE_TRAITEMENT

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
