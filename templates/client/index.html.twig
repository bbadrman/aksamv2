{% extends 'base.html.twig' %}

{% block title %}Client index
{% endblock %}

{% block body %}
	<style>
		/* Styles pour améliorer l'affichage des contrats */
		.expanded-content td {
			padding: 0 !important;
		}
		.expanded-content .table-responsive {
			margin-bottom: 0;
		}
		.loading {
			padding: 20px;
			text-align: center;
			font-style: italic;
			color: #666;
		}
		.client-row {
			cursor: pointer;
		}
		.client-row:hover {
			background-color: #f5f5f5;
		}
	</style>

	{% for label, messages in app.flashes %}
		<div class="container">
			<div class="alert alert-{{ label }}">
				{% for message in messages %}
					{{ message|raw }}
				{% endfor %}
			</div>
		</div>
	{% endfor %}

	<section class="content-header">
		<h2>Clients</h2>
		<ol class="breadcrumb">
			<li>
				<a href="{{ path('app_home') }}">
					<i class="fa fa-dashboard"></i>
					Tableau de bord
				</a>
			</li>
			<li class="active">
				<a href="{{ path('client_index') }}">
					<i class="fa fa-object-fonction"></i>
					Tous les clients
				</a>
			</li>
		</ol>
	</section>


	<div class="col-xs-12 mx-auto d-flex justify-content-center">
		<div class="row" style="margin-right: 12px;">
			{% include 'client/_search_form.html.twig' with {search_form: search_form} only %}
		</div>
	</div>

	<div class="row mt">
		<div class="col-lg-12">
			<div class="content-panel">
				<table class="table table-striped table-advance table-hover">
					<thead>
						<tr>
							<th>Equipe</th>
							<th>Commercial</th>
							<th>Nom</th>
							<th>Prénom</th>
							<th>Téléphone</th>
							<th>Email</th>
							<th>Raison Sociale</th>
							<th>Adresse</th>
							<th>Créé le</th>
							<th>Forme Juridique</th>
							<th style="text-align:center;">Nbr Contrats</th>
							<th>Actions</th>
						</tr>
					</thead>
					<tbody>
						{% for client in clients %}
							<tr class="expandable-row client-row" data-client-id="{{ client.id }}">
								<td>{{ client.team }}</td>
								<td>{{ client.cmrcl }}</td>
								<td>{{ client.nom }}</td>
								<td>{{ client.prenom }}</td>
								{% if is_granted('ROLE_ADMIN') or is_granted('ROLE_CLIENT') or app.user == client.cmrcl %}
									<td>{{ client.phone }}</td>
									<td>{{ client.email }}</td>
								{% else %}
									<td>—</td>
									<td>—</td>
								{% endif %}
								<td>{{ client.raisonSociale }}</td>
								<td>{{ client.adress }}</td>
								<td>{{ client.creatAt ? client.creatAt|date('Y-m-d H:i') : '' }}</td>
								<td>
									{% set formes = {
                                    1: 'SARL', 2: 'EI', 3: 'EURL', 4: 'SA', 5: 'SAS',
                                    6: 'SASU', 7: 'SNC', 8: 'SCOP', 9: 'Association'
                                } %}
									{{ formes[client.forceJuridique] ?? '' }}
								</td>
								<td style="text-align:center;">
									{{ client.contrats|filter(contrat => contrat.status == 1)|length }}
								</td>
								<td class="btn-toolbar">
									{% if client.status == 1 %}
										<a href="{{ path('app_contrat_new', {'id': client.id}) }}" class="btn btn-success btn-xs">CONTRAT</a>
									{% elseif client.status == 2 %}
										{% if app.user == client.cmrcl %}
											<a href="{{ path('client_valide_edit', {'id': client.id}) }}" class="btn btn-danger btn-xs">REJETER</a>
										{% elseif client.isModifie == 1 %}
											<a href="{{ path('app_client_edit', {'id': client.id}) }}" class="btn btn-xs" style="background-color:#98FB98;">MODIFIÉ</a>
										{% else %}
											<a href="{{ path('app_client_edit', {'id': client.id}) }}" class="btn btn-danger btn-xs">REJETER</a>
										{% endif %}
									{% elseif client.status is null %}
										{% if is_granted('ROLE_VALID') and app.user == client.cmrcl %}
											<a href="{{ path('client_valide_edit', {'id': client.id}) }}" class="btn btn-success btn-xs">MYCLIENT</a>
										{% else %}
											{% if is_granted('ROLE_VALID') %}
												<a href="{{ path('app_client_edit', {'id': client.id}) }}" class="btn btn-primary btn-xs">NOUVEAU</a>
											{% else %}
												En vérification
											{% endif %}
										{% endif %}
									{% endif %}

									{% if is_granted('ROLE_ADMIN') %}
										<a href="{{ path('client_valide_edit', {'id': client.id}) }}" class="btn btn-primary btn-xs">
											<i class="fa fa-pencil"></i>
										</a>
									{% endif %}
								</td>
							</tr>
							<!-- Ligne pour les contrats (initialement cachée) -->
							<tr class="expanded-content contract-row" style="display: none;">
								<td colspan="12">
									<div class="loading">Cliquez pour charger les contrats...</div>
								</td>
							</tr>
						{% endfor %}
					</tbody>
					<tfoot class="text-right">
						<tr>
							<td colspan="12">{{ knp_pagination_render(clients, 'pagination.html.twig') }}</td>
						</tr>
					</tfoot>
				</table>
			</div>
		</div>
	</div>

	<!-- Separate Ajax-based contract loading -->
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script>
		document.addEventListener('DOMContentLoaded', function () { // Gestion des clics sur les lignes de clients
const clientRows = document.querySelectorAll('.client-row');

clientRows.forEach(row => {
row.addEventListener('click', function () { // Get client ID from the data attribute
const clientId = this.getAttribute('data-client-id') ||
// Alternative: Extract from URL in button if data-client-id is not set
this.querySelector('a[href*="/client/"]') ?. getAttribute('href') ?. match(/\/client\/(\d+)/) ?. [1];

if (! clientId) 
return;



// Skip if we can't determine client ID

// Trouver la ligne de contrat (la ligne suivante)
const contractContainer = this.nextElementSibling;

if (contractContainer.style.display === 'none' || ! contractContainer.style.display) {
contractContainer.style.display = 'table-row';

// Only load contracts if not already loaded
if (! contractContainer.getAttribute('data-loaded')) {
const loadingDiv = contractContainer.querySelector('.loading');
if (loadingDiv) 
loadingDiv.textContent = 'Chargement des contrats...';



fetch (`/client/client/${clientId}/contracts`).then(response => {
if (!response.ok) {
throw new Error('Erreur réseau');
}
return response.text();
}).then(html => {
contractContainer.querySelector('td').innerHTML = html;
contractContainer.setAttribute('data-loaded', 'true');

// Après avoir chargé les contrats, initialiser les événements pour les SAV
initContractSavEvents(contractContainer);
}).catch(error => {
contractContainer.querySelector('td').innerHTML = '<div class="alert alert-danger">Erreur lors du chargement des contrats</div>';
console.error('Erreur:', error);
});
}
} else {
contractContainer.style.display = 'none';
}
});
});

// Fonction pour initialiser les événements sur les lignes de contrats pour afficher les SAV
function initContractSavEvents(container) {
const contratRows = container.querySelectorAll('.contrat-row');

contratRows.forEach(row => {
row.addEventListener('click', function (e) { // Empêcher la propagation si on clique sur un bouton
if (e.target.closest('.btn, .btn-toolbar')) {
return;
}

const contratId = this.getAttribute('data-contrat-id');

if (! contratId) 
return;



// Trouver la ligne SAV (la ligne suivante)
const savContainer = this.nextElementSibling;

if (savContainer && savContainer.classList.contains('sav-row')) {
if (savContainer.style.display === 'none' || ! savContainer.style.display) {
savContainer.style.display = 'table-row';

// Only load SAVs if not already loaded
if (! savContainer.getAttribute('data-loaded')) {
const loadingDiv = savContainer.querySelector('.loading');
if (loadingDiv) 
loadingDiv.textContent = 'Chargement des SAV...';



fetch (`/client/contract/${contratId}/savs`).then(response => {
if (!response.ok) {
throw new Error('Erreur réseau');
}
return response.text();
}).then(html => {
savContainer.querySelector('td').innerHTML = html;
savContainer.setAttribute('data-loaded', 'true');
}).catch(error => {
savContainer.querySelector('td').innerHTML = '<div class="alert alert-danger">Erreur lors du chargement des SAV</div>';
console.error('Erreur:', error);
});
}
} else {
savContainer.style.display = 'none';
}
}
});
});
}
});
	</script>
	<script>
		// Script pour le modal de paiement
document.addEventListener('DOMContentLoaded', function () { // Utiliser une délégation d'événements pour gérer toutes les modales
$(document).on('shown.bs.modal', '.modal', function (e) {
const modal = this;

// Gestion du nombre de règlements
const reglementSelect = modal.querySelector('[name$="[NmbrReglement]"]');
const reglementItems = modal.querySelectorAll('.reglement-item');

function updateReglements() {
const count = parseInt(reglementSelect.value) || 1;
reglementItems.forEach((item, index) => { // L'index commence à 0, mais nos classes commencent à reglement-1
const reglementNum = index + 1;
if (reglementNum <= count) {
item.classList.remove('d-none');
} else {
item.classList.add('d-none');
}
});
}

if (reglementSelect) { // Supprimer les anciens listeners pour éviter les doublons
reglementSelect.removeEventListener('change', updateReglements);
// Ajouter le nouveau listener
reglementSelect.addEventListener('change', updateReglements);
// Initialiser l'état
updateReglements();
}

// Gestion des champs conditionnels par type
const typeSelect = modal.querySelector('[name$="[type]"]');

// Vérifier si les éléments existent avant de continuer
if (typeSelect) {
const fraisFieldElement = modal.querySelector('[name$="[frais]"]');
const cotisationFieldElement = modal.querySelector('[name$="[cotisation]"]');
const contrePartieFieldElement = modal.querySelector('[name$="[contrePartie]"]');

// Si les éléments existent, récupérer leurs conteneurs
if (fraisFieldElement && cotisationFieldElement && contrePartieFieldElement) {
const fraisField = fraisFieldElement.closest('.form-group');
const cotisationField = cotisationFieldElement.closest('.form-group');
const contrePartieField = contrePartieFieldElement.closest('.form-group');

function updatePaymentFields() {
const selectedType = typeSelect.value;

// Masquer tous les champs
fraisField.classList.add('d-none');
cotisationField.classList.add('d-none');
contrePartieField.classList.add('d-none');

// Afficher le champ sélectionné
if (selectedType === 'frais') {
fraisField.classList.remove('d-none');
} else if (selectedType === 'cotisation') {
cotisationField.classList.remove('d-none');
} else if (selectedType === 'contrePartie') {
contrePartieField.classList.remove('d-none');
}
}

// Supprimer les anciens listeners pour éviter les doublons
typeSelect.removeEventListener('change', updatePaymentFields);
// Ajouter le nouveau listener
typeSelect.addEventListener('change', updatePaymentFields);
// Initialiser l'état
updatePaymentFields();
}
}
});
});
	</script>
{% endblock %}
