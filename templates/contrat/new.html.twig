{% extends 'base.html.twig' %}

{% block title %}Ajouter Contrat
{% endblock %}

{% block body %}
	{% for label,  messages in app.flashes  %}
		<div class="container">
			<div class="alert alert-{{ label }}">
				{% for message in messages %}
					{{ message | raw }}
				{% endfor %}

			</div>
		</div>
	{% endfor %}

	<section class="content-header ">
		<h1>
			Contrats
			<small>Ajouter</small>
		</h1>
		<ol class="breadcrumb">
			<li>
				<a href="{{ path('app_home') }}">
					<i class="fa fa-dashboard"></i>
					Tableau de bord</a>
			</li>
			<li>
				<a href="{{ path('app_prospect_index') }}">
					<i class="fa fa-users"></i>
					Tous les Contrats</a>
			</li>
			<li class="active">Ajouter un Contrat</li>
		</ol>
	</section>

	<!-- FORM -->
	{% block form %}
		<div class="row mt ">
			<div class="col-lg-12">
				{{ include('contrat/_form.html.twig') }}
			</div>

		</div>
	{% endblock %}

	<!-- END FORM -->
{% endblock %}
{% block javascripts %}
	<script type="text/javascript">


		// champ regelemen et anticip
document.addEventListener('DOMContentLoaded', function () {
const reglementSelect = document.querySelector('[name="contrat[NmbrReglement]"]');
const container = document.getElementById('reglements-container');

reglementSelect.addEventListener('change', function (e) {
const targetCount = parseInt(e.target.value);
let currentCount = container.querySelectorAll('.reglement-item').length;

// **ðŸ’¡ Ã‰tape 1 : Supprimer tous les Ã©lÃ©ments avant d'en ajouter des nouveaux**
container.innerHTML = '';

// **ðŸ’¡ Ã‰tape 2 : Ajouter uniquement le nombre requis**
const prototype = container.dataset.prototype;
container.dataset.index = 0; // RÃ©initialiser l'index

for (let i = 0; i < targetCount; i++) {
let newForm = prototype.replace(/__name__/g, container.dataset.index);
let div = document.createElement('div');
div.classList.add('reglement-item');
div.innerHTML = newForm;
container.appendChild(div);
container.dataset.index ++;
}
});
});

// pour anticipe
document.addEventListener('DOMContentLoaded', function () {
const assureSelect = document.querySelector('[name="contrat[NmbrAssure]"]');
const containerAssure = document.getElementById('antcdAssure-container');

assureSelect.addEventListener('change', function (e) {
const targetCount = parseInt(e.target.value);

// **ðŸ’¡ Ã‰tape 1 : Supprimer tous les Ã©lÃ©ments avant d'en ajouter des nouveaux**
containerAssure.innerHTML = '';

// **ðŸ’¡ Ã‰tape 2 : Ajouter uniquement le nombre requis**
const prototype = containerAssure.dataset.prototype;
containerAssure.dataset.index = 0; // RÃ©initialiser l'index

for (let i = 0; i < targetCount; i++) {
let newForm = prototype.replace(/__name__/g, containerAssure.dataset.index);
let div = document.createElement('div');
div.classList.add('antcdAssure-item');
div.innerHTML = newForm;
containerAssure.appendChild(div);
containerAssure.dataset.index ++;
}
});
});

// select dynamique des champs
document.addEventListener("DOMContentLoaded", function () { // RÃ©cupÃ©rer les Ã©lÃ©ments du DOM
var typeContratField = document.getElementById("{{ form.typeContrat.vars.id }}");
var typeConducteurField = document.getElementById("{{ form.typeConducteur.vars.id }}");
var productField = document.getElementById("{{ form.product.vars.id }}");

var subcategoryContainer = document.getElementById("subcategory-container");
var subcategoryActivites = document.getElementById("subcategory-activite");

var subcategoryconducteur = document.getElementById("subcategory-conducteur");
var subcategorytypePermis = document.getElementById("subcategory-typePermis");
var subcategorydatePermis = document.getElementById("subcategory-datePermis");

// Fonction pour gÃ©rer la visibilitÃ© des champs en fonction de typeContrat
function handleTypeContratChange() {
if (typeContratField.value === 'Particulier') {
subcategoryContainer.style.display = "none"; // Masquer le champ
subcategoryActivites.style.display = "none"; // Masquer le champ
} else {
subcategoryContainer.style.display = "block"; // Afficher le champ
subcategoryActivites.style.display = "block"; // Afficher le champ
}
}

// Fonction pour gÃ©rer la visibilitÃ© des champs en fonction de typeConducteur
function handleTypeConducteurChange() {
if (typeConducteurField.value === 'Multiconducteur') {
subcategoryconducteur.style.display = "none"; // Masquer le champ
subcategorytypePermis.style.display = "none"; // Masquer le champ
subcategorydatePermis.style.display = "none"; // Masquer le champ
} else {
subcategoryconducteur.style.display = "block"; // Afficher le champ
subcategorytypePermis.style.display = "block"; // Afficher le champ
subcategorydatePermis.style.display = "block"; // Afficher le champ
}
}

// Fonction pour gÃ©rer la visibilitÃ© des champs en fonction de Product
function handleProductChange() {
if (productField.value === '1' || productField.value === '22') {
subcategoryconducteur.style.display = "none";
subcategorytypePermis.style.display = "none";
subcategorydatePermis.style.display = "none";
} else {
subcategoryconducteur.style.display = "block"; // Afficher le champ
subcategorytypePermis.style.display = "block"; // Afficher le champ
subcategorydatePermis.style.display = "block"; // Afficher le champ
}
}

// Ã‰couter les changements de typeContrat
if (typeContratField) {
typeContratField.addEventListener("change", handleTypeContratChange);
}

// Ã‰couter les changements de typeConducteur
if (typeConducteurField) {
typeConducteurField.addEventListener("change", handleTypeConducteurChange);
}
// Ã‰couter les changements de Product
if (productField) {
productField.addEventListener("change", handleProductChange);
}

// Appliquer les rÃ¨gles initiales au chargement de la page
handleTypeContratChange();
handleTypeConducteurChange();
handleProductChange();
});
	</script>
{% endblock %}
