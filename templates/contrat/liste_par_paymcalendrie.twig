{% extends 'base.html.twig' %}

{% block title %}Statistiques des contrats du mois
{% endblock %}

{% block body %}
	{% for label,  messages in app.flashes  %}
		<div class="container">
			<div class="alert alert-{{ label }}">
				{% for message in messages %}
					{{ message | raw }}
				{% endfor %}
			</div>
		</div>
	{% endfor %}

	<div class="row mt">
		<div class="col-lg-12">
			<div class="content-panel">
				<section class="content-header">
					<h1 style="text-align: center;">
						Chiffres d'Affaires
						<br>
					</h1>

					<ol class="breadcrumb">
						<li>
							<a href="{{ path('app_home') }}">
								<i class="fa fa-dashboard"></i>
								Tableau de bord</a>
						</li>
					</ol>
				</section>

				{# Formulaire de filtre par dates de création #}
				<div class="card mb-4">
					<div class="card-header">
						<h5 class="mb-0">
							<i class="fa fa-filter"></i>
							Filtrer par période de création
						</h5>
					</div>
					<div class="card-body">
						<form method="GET" action="{{ path('paymentfilter') }}" class="row align-items-end">
							<div class="col-md-4">
								<label for="date_from" class="form-label">Date de création - Début :</label>
								<input type="date" class="form-control" id="date_from" name="date_from" value="{{ dateFrom }}" required>
							</div>
							<div class="col-md-4">
								<label for="date_to" class="form-label">Date de création - Fin :</label>
								<input type="date" class="form-control" id="date_to" name="date_to" value="{{ dateTo }}" required>
							</div>
							<div class="col-md-4">
								<button type="submit" class="btn btn-primary">
									<i class="fa fa-search"></i>
									Filtrer
								</button>
								<a href="{{ path('paymentfilter') }}" class="btn btn-secondary ml-2">
									<i class="fa fa-refresh"></i>
									Réinitialiser
								</a>
							</div>
						</form>
					</div>
				</div>

				<hr>
				<table id="contrat-stats" class="table table-striped table-hover table-bordered">
					<thead>
						<tr>
							<th>Commercial</th>
							<th class="text-right">Nombre de contrats</th>
							<th class="text-right sortable" data-sort="frais" style="cursor:pointer;">
								Frais Déclarés
								<i class="fa-solid fa-sort"></i>
							</th>
							<th class="text-right sortable" data-sort="montants" style="cursor:pointer;">
								Frais Encaissé
								<i class="fa-solid fa-sort"></i>
							</th>
							<th class="text-right sortable" data-sort="reste" style="cursor:pointer;">
								Reste
								<i class="fa-solid fa-sort"></i>
							</th>
						</tr>
					</thead>
					<tbody>
						{% set grandTotalFrais = 0 %}
						{% set grandTotalCotisation = 0 %}
						{% set grandTotalMontants = 0 %}
						{% set grandTotalReste = 0 %}

						{% for item in dataParCommercial %}
							{% set totalFrais = 0 %}
							{% set totalCotisation = 0 %}
							{% set totalMontants = 0 %}

							{# Calculer le nombre de contrats uniques pour ce commercial #}
							{% set contratstUniques = [] %}
							{% for trans in item.transactions %}
								{% set contratId = trans.contrat.id %}
								{% if contratId not in contratstUniques %}
									{% set contratstUniques = contratstUniques|merge([contratId]) %}
								{% endif %}
							{% endfor %}
							{% set nbContrats = contratstUniques|length %}

							{# Calculer le total des frais déclarés pour ce commercial #}
							{% set totalFraisCommercial = 0 %}
							{% set processedPayments = [] %}

							{% for trans in item.transactions %}
								{% set payment = trans.payment %}
								{% if payment and payment.id not in processedPayments %}
									{% set processedPayments = processedPayments|merge([payment.id]) %}
									{% set totalFraisCommercial = totalFraisCommercial + (payment.frais ?? 0) %}
								{% endif %}
								{% set totalMontants = totalMontants + (trans.montant ?? 0) %}
							{% endfor %}
							{% set totalReste = totalFraisCommercial - totalMontants %}


							<tr class="commercial-summary" data-target="details-{{ loop.index }}" data-total-frais="{{ totalFraisCommercial }}" data-total-montants="{{ totalMontants }}" data-total-reste="{{ totalReste }}">
								<td>
									<button class="btn btn-info">{{ item.user.username }}
										<i class="fas fa-angle-down mr-2"></i>
									</button>
								</td>
								<td class="text-right">{{ nbContrats }}</td>
								<td class="text-right">
									<strong>{{ totalFraisCommercial|number_format(2, ',', ' ') }}</strong>
									€
								</td>
								<td class="text-right">
									<strong>{{ totalMontants|number_format(2, ',', ' ') }}</strong>
									€
								</td>

								<td class="text-right">
									<strong class="text-primary">{{ totalReste|number_format(2, ',', ' ') }}</strong>
									€
								</td>

								{% set grandTotalReste = grandTotalReste + totalReste %}
								{% set grandTotalFrais = grandTotalFrais + totalFraisCommercial %}
								{% set grandTotalFrais = grandTotalFrais + totalFraisCommercial %}
								{% set grandTotalMontants = grandTotalMontants + totalMontants %}
							</tr>

							{# Détails cachés par défaut #}
							<tr class="details-row details-{{ loop.index }} d-none">
								<td
									colspan="5" class="bg-light p-4">
									{# Grouper les transactions par contrat - méthode simple #}
									{% set contratsList = [] %}
									{% set processedContrats = [] %}

									{# Identifier tous les contrats uniques #}
									{% for trans in item.transactions %}
										{% set contratId = trans.contrat.id %}
										{% if contratId not in processedContrats %}
											{% set processedContrats = processedContrats|merge([contratId]) %}

											{# Collecter toutes les transactions pour ce contrat #}
											{% set contratTransactions = [] %}
											{% set totalMontantContrat = 0 %}
											{% set transactionAmounts = [] %}
											{% set transactionNumbers = [] %}

											{% for t in item.transactions %}
												{% if t.contrat.id == contratId %}
													{% set contratTransactions = contratTransactions|merge([t]) %}
													{% set totalMontantContrat = totalMontantContrat + (t.montant ?? 0) %}
													{% set transactionAmounts = transactionAmounts|merge([t.montant ?? 0]) %}
													{% set transactionNumbers = transactionNumbers|merge([t.transaction]) %}
												{% endif %}
											{% endfor %}

											{% set contratsList = contratsList|merge([{
												'contrat': trans.contrat,
												'transactions': contratTransactions,
												'total': totalMontantContrat,
												'amounts': transactionAmounts,
												'transactionNumbers': transactionNumbers
											}]) %}
										{% endif %}
									{% endfor %}

									<div class="card">
										<div class="card-header bg-info text-white">
											<h6 class="mb-0">
												<i class="fa fa-file-contract"></i>
												Détails des contrats pour
												{{ item.user.username }}
											</h6>
										</div>
										<div class="card-body p-0">
											<table class="table table-hover mb-0">
												<thead class="table-dark">
													<tr>
														<th style="width: 8%;">ID Contrat</th>
														<th style="width: 18%;">Nom Contrat</th>
														<th style="width: 12%;">Date Souscription</th>
														<th style="width: 12%;">Matricule</th>
														<th style="width: 12%;" class="text-right">Frais Déclarés</th>
														<th style="width: 13%;" class="text-right">Frais Encaissé</th>
														<th style="width: 10%;" class="text-right">Reste</th>
														<th style="width: 22%;">Détail Calcul</th>
													</tr>
												</thead>
												<tbody>
													{% for contratData in contratsList %}
														{% set contrat = contratData.contrat %}
														{% set payment = contrat.payments %}
														{% set fraisContrat = payment and payment.frais ? payment.frais : 0 %}
														{% set resteContrat = fraisContrat - contratData.total %}

														<tr>
															<td>
																<span class="badge bg-primary">{{ contrat.id }}</span>
															</td>
															<td>
																<strong>{{ contrat.nom ?? 'Non défini' }}</strong>
																{% if contrat.prenom %}
																	<br><small class="text-muted">{{ contrat.prenom }}</small>
																{% endif %}
															</td>
															<td>
																{% if contrat.dateSouscrpt %}
																	<span class="badge bg-success">{{ contrat.dateSouscrpt|date('d/m/Y') }}</span>
																{% else %}
																	<span class="badge bg-secondary">Non définie</span>
																{% endif %}
															</td>
															<td>
																{% if contrat.imatriclt %}
																	<code>{{ contrat.imatriclt }}</code>
																{% else %}
																	<em class="text-muted">Non défini</em>
																{% endif %}
															</td>
															<td class="text-right">
																{% if payment and payment.frais %}
																	<strong class="text-info">{{ payment.frais|number_format(2, ',', ' ') }}
																		€</strong>
																{% else %}
																	<span class="badge bg-secondary">Non défini</span>
																{% endif %}
															</td>
															<td class="text-right">
																<strong class="text-success">{{ contratData.total|number_format(2, ',', ' ') }}
																	€</strong>
															</td>
															<td class="text-right">
																<strong class="text-primary">{{ resteContrat|number_format(2, ',', ' ') }}
																	€</strong>
															</td>
															<td>
																<small class="text-muted">
																	{% for i, amount in contratData.amounts %}
																		{% if i > 0 %}
																			+
																		{% endif %}
																		<span class="badge bg-light text-dark">{{ amount|number_format(2, ',', ' ') }}</span>
																	{% endfor %}
																</small>
																<br>
																<small class="text-info">
																	Transactions:
																	{{ contratData.transactionNumbers|join(', ') }}
																</small>
															</td>
														</tr>
													{% endfor %}
												</tbody>

											</table>
										</div>
									</div>
								</td>
							</tr>
						{% endfor %}

						<tr class="table-dark font-weight-bold">
							<td>
								<strong>Total Général</strong>
							</td>
							<td></td>
							<td class="text-right">
								<strong>{{ grandTotalFrais|number_format(2, ',', ' ') }}
									€</strong>
							</td>
							<td class="text-right">
								<strong>{{ grandTotalMontants|number_format(2, ',', ' ') }}
									€</strong>
							</td>
							<td class="text-right">
								<strong>{{ grandTotalReste|number_format(2, ',', ' ') }}</strong>
								€
							</td>
						</tr>
					</tbody>
				</strong>
			</td>
		</tr>
	</tbody>
</table></div></div></div>{% endblock %}{% block javascripts %}{{ parent() }}<script>document.addEventListener('DOMContentLoaded', function () {
let sortAscFrais = true;
let sortAscMontants = true;
let sortAscReste = true;

// Toggle les lignes de détails
document.querySelectorAll('.commercial-summary').forEach(row => {
row.addEventListener('click', () => {
const target = row.dataset.target;
document.querySelectorAll (`.details-row.${target}`).forEach(tr => {
tr.classList.toggle('d-none');
});
});
});

function sortTableBy(column, ascending) {
const tbody = document.querySelector('#contrat-stats tbody');
const rows = Array.from(tbody.querySelectorAll('.commercial-summary'));

const sortedRows = rows.sort((a, b) => {
const valA = parseFloat(a.dataset[column]);
const valB = parseFloat(b.dataset[column]);
return ascending ? valA - valB : valB - valA;
});

// Réorganiser les lignes avec les détails
tbody.innerHTML = '';
sortedRows.forEach(row => {
tbody.appendChild(row);
const target = row.dataset.target;
document.querySelectorAll (`.details-row.${target}`).forEach(tr => {
tbody.appendChild(tr);
});
});

// Réajouter la ligne de total à la fin
const totalRow = document.querySelector('.table-dark');
if (totalRow) {
tbody.appendChild(totalRow);
}
}

document.querySelector('.sortable[data-sort="frais"]').addEventListener('click', () => {
sortTableBy('totalFrais', sortAscFrais);
sortAscFrais = ! sortAscFrais;
});

document.querySelector('.sortable[data-sort="montants"]').addEventListener('click', () => {
sortTableBy('totalMontants', sortAscMontants);
sortAscMontants = ! sortAscMontants;
});

document.querySelector('.sortable[data-sort="reste"]').addEventListener('click', () => {
sortTableBy('totalReste', sortAscReste);
sortAscReste = ! sortAscReste;
});
// Validation des dates
const dateFrom = document.getElementById('date_from');
const dateTo = document.getElementById('date_to');

function validateDates() {
if (dateFrom.value && dateTo.value) {
if (new Date(dateFrom.value) > new Date(dateTo.value)) {
alert('La date de début ne peut pas être supérieure à la date de fin.');
return false;
}
}
return true;
}

dateFrom.addEventListener('change', validateDates);
dateTo.addEventListener('change', validateDates);

// Empêcher la soumission si les dates sont invalides
document.querySelector('form').addEventListener('submit', function (e) {
if (! validateDates()) {
e.preventDefault();
}
});
});</script>{% endblock %}
